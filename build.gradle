import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
import static org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED
import static org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED
import static org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED

apply plugin: "java"
apply plugin: "signing"
apply plugin: "maven-publish"

group = "uk.codenest"
version = "1.0.0"
description = "mongofly"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: "org.mongodb", name: "mongo-java-driver", version: "3.10.2"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.9"

    compileOnly group: "org.projectlombok", name: "lombok", version: "1.18.8"
    annotationProcessor group: "org.projectlombok", name: "lombok", version: "1.18.8"

    compile group: "org.slf4j", name: "slf4j-api", version: "1.7.26"

    testCompile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.26"
    testCompile "log4j:log4j:1.2.17"
    testCompile "org.testng:testng:6.14.3"
}


test {
    useTestNG()

    testLogging.events = [PASSED, SKIPPED, FAILED]
    testLogging.exceptionFormat = FULL
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

artifacts {
    archives jar
    archives sourceJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId group
            artifactId artifactId
            version version

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = "pom.asc"
                }
            }

            artifact(sourceJar) {
                classifier = "sources"
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = "jar.asc"
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description "Serialize and Deserialize Json-LD into Java entities"
            name "Mongofly Java"
            url "https://github.com/CodenestLtd/mongofly"
            organization {
                name "Codenest Ltd"
                url "https://github.com/CodenestLtd"
            }
            issueManagement {
                system "GitHub"
                url "https://github.com/CodenestLtd/mongofly/issues"
            }
            licenses {
                license {
                    name "Apache License 2.0"
                    url "https://github.com/CodenestLtd/mongofly/blob/master/LICENSE"
                    distribution "repo"
                }
            }
            scm {
                url "https://github.com/CodenestLtd/mongofly"
                connection "scm:git:git@github.com:CodenestLtd/mongofly.git"
                developerConnection "scm:git:git@github.com:CodenestLtd/mongofly.git"
            }
            developers {
                developer {
                    name "Ankit Rana"
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }

    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
